//TODO: Triangles & polygons
//TODO: Textured items
//TODO: Portals
//TODO: Camera
//TODO: Scene

// Менеджер X - он владеет ресурсами X, а всем раздает только указатели.
// Правило 3 - если кто то переопределен из A(A&), ~A, op=(A&), то должны быть переопределены остальные.
// Правило 0 - никого не переопределять.
// Читай дизайн и эволюцию.
// Лучше =default, когда надо.
// Скот Мейерс Эффективный С++. (-Weffc++)

// Annotated design C++

// Два класса. Array (аналог std::array); operator[], 
//             Vector 
//             Test class instead of int.


// Для new можно переопределить агрументы. Можно в макрос. И хранить отладочную  информацию.

// Placement syntax new. Хотим создать объект в буфере но не сразу. Класс дин. массив. Заказ памяти с запасом. Не вызывать конструкторы с запасом.
// Создаем char* нужного размера.  

// void* new(size_t, void* mem)
//  {
//      return mem;
//  }

// Для какого из классов переопределить new.
// Переопр глобальный new и delete ([]). 
// Каноническое поведение + printf. Создание одинчого эл-та для обхяека с/без переопр. +-деструктор у объекта. Иссл...

// Diifer operator new & new expression. Also with delete

// Функция new_hadler -> вызывается если не смог malloc в new. Замена с set_new_hadler
// before 03 return null  since 03 throw BAD_ALLOC
// Аналог старого new: new (std::nothrow) A  ...

// Исключения: Компилятор берет на себя обработку ошибок.
// try {} catch {}. 
// catch... ловит всё остав.
// если не найден catch вызывается unexpected, он вызывает terminate, который вызывает abort/
// Stack upwinding -> вызываются все деструкторы всех полностью постоенных объектов. (До конца конструктор).
// В слчае объектов не 1 класса, надо самому вызвать деструкторы для объектов которые мы сконструировали.
// Формально можно throw в деструкторе. Если исключение во время обработки исключения, то terminate. Поэтому throw в деструкторе недопустим.
// Про безопасность исключений. Код становится хрупким. Буквально любой участок кода может стать хрупким. Гарантии безопасности по Абрамсу.
// Лучший уровень гарантии (1) = не выбрасывать исключений вообще.
// (2) Гарантия, что всё разрушилось, что нужно
// (3) Транзакционная гарантия исключение обработано -> он вернулся в исходное состояние. (Нет частичных изменений).
// (4) Нет гарантий.

// Где хранится объект ?

// Exceptions is expensive. При throw регистрируется пара (указтель на объект, указатель на деструктор). 
// Можно посмотреть: _cxa_throw - вызывается когда используется throw.
// На каждый catch генерится функция, анализирующая совметимость типов.
// При линковке, файлов скопилированных разными версиями компилятора все может сломаться.
// Статья: c++ injection in depth